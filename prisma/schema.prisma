generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  username  String    @unique
  password  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  accounts  Account[]
  projects  Project[] @relation("UserProjects")
  sessions  Session[]
}

model Project {
  id            String     @id @default(cuid())
  name          String
  description   String
  consentInfo   String
  imageCount    Int
  imageDuration Int
  userId        String
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  images        Image[]    @relation("ProjectImages")
  user          User       @relation("UserProjects", fields: [userId], references: [id])
  questions     Question[] @relation("ProjectQuestions")
}

model Question {
  id        String  @id @default(cuid())
  text      String
  projectId String
  project   Project @relation("ProjectQuestions", fields: [projectId], references: [id])
  scores    Score[]
}

model Image {
  id        String  @id @default(cuid())
  url       String
  projectId String
  project   Project @relation("ProjectImages", fields: [projectId], references: [id])
  scores    Score[]
}

model Score {
  id         String   @id @default(cuid())
  value      Float
  sessionId  String
  questionId String
  imageId    String
  createdAt  DateTime @default(now())
  image      Image    @relation(fields: [imageId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])
}
